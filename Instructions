1. Create a health check that works locally using mongosh[Done, verified using public url in local, private url in cluster]
2. We have to create a docker image that only has mongosh. -> name it as mongoHealthCheck Container
3. then we have to create a sidecar to deploy this docker image and once the sidecar stops(it means it is healthy), the other container will start
----
2:
we just require a docker image with MongoSh, thats all. we can choose any platform(Debian preferred)
Added the dockerfile as reference, needs to be evaluated
---
3:
We should not use init containers as it wont be viable for istio-proxy:
ref: https://medium.com/@marko.luksa/delaying-application-start-until-sidecar-is-ready-2ec2d21a7b74
For 3rd, we need to add these block of code whereever mongo is being used: 
# note that {{ include "harnesscommon.dbconnection.mongoConnection" (dict "database" "harness" "context" $) }} wont work as $(MONGO_USER) is not resolved by some containers, we can discuss/explore this, it is not working in bash. might work in sh

containers:
{{ - if not .global.database.mongo.installed }}
  - name: wait-for-mongo
    image: dockerImageCreateInStep2
    env:
    {{- include "harnesscommon.dbconnection.dbenvuser" | nindent 12}}
    - name: MONGO_PROTOCOL
      value: {{ .Values.global.database.mongo.protocol }}
    - name: MONGO_HOST
      value:  {{ .Values.global.database.mongo.hosts }}
    - name: MONGO_URI
      value: $MONGO_PROTOCOL://$MONGO_USER:$MONGO_PASSWORD@$MONGO_HOST/admin?retryWrites=true
    lifecycle:
      postStart:
        exec:
          command:
          - until mongosh $MONGO_URI --eval "db.adminCommand('ping')"; do echo waiting for mongodb; sleep 2; done
  - name: rest-of-the-application
    image: my-application